schema {
  query: Query
  mutation: Mutation
  subscription: Subscriptions
}

type MenuPlan {
  recipeIds: [UUID!]!
  participantIds: [UUID!]!
  chefIds: [UUID!]
  recipes: [Recipe!]!
  participants: [Resident!]!
  chefs: [Resident!]!
  guests: [Guest!]!
  date: DateTime!
  thumbnail: String
  id: UUID!
  createdAt: DateTime!
  modifiedAt: DateTime!
}

type Resident {
  participatesInIds: [UUID!]!
  participatesIn: [MenuPlan!]!
  cooksIn: [MenuPlan!]!
  username: String!
  firstName: String
  lastName: String
  birthDate: DateTime!
  child: Boolean!
  houseNumber: String!
  cooksInIds: [UUID!]
  id: UUID!
  createdAt: DateTime!
  modifiedAt: DateTime!
}

type Query {
  menuPlan(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: MenuPlanFilterInput
    order: [MenuPlanSortInput!]
  ): MenuPlanConnection
  menuPlanById(id: UUID!): MenuPlan
  recipes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: RecipeFilterInput
    order: [RecipeSortInput!]
  ): RecipesConnection
  recipeById(id: UUID!): Recipe
  me: Resident!
  residents(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: ResidentFilterInput
    order: [ResidentSortInput!]
  ): ResidentsConnection
  residentById(id: UUID!): Resident
}

type Mutation {
  createRecipe(createRecipe: CreateRecipeInput!): Recipe!
  createMenuPlan(createMenuPlan: CreateMenuPlanInput!): MenuPlan!
  createWeekPlan(createWeekPlan: CreateWeekPlanInput!): [MenuPlan!]!
  toggleAttendance(input: MenuPlanAttendanceInput!): MenuPlan!
  signUpForCooking(date: DateTime!, residentId: UUID): MenuPlan!
  removeSignUpForCooking(
    date: DateTime!
    residentId: UUID
    retainParticipation: Boolean
  ): MenuPlan!
  upsertGuests(
    menuPlanId: UUID!
    houseNumber: String!
    numberOfChildGuests: Int
    numberOfAdultGuests: Int
  ): MenuPlan!
  testEmail(template: String!): SuccessResult!
  createResident(resident: CreateResidentInput!): Resident!
  authenticate(authenticateInput: AuthenticateInput!): AuthenticateResult!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): SuccessResult!
  changePassword(input: ChangePasswordInput!): SuccessResult!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type Subscriptions {
  menuPlanUpdated: MenuPlanUpdatedEventMessage!
}

scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")

type Recipe {
  name: String!
  category: String!
  id: UUID!
  createdAt: DateTime!
  modifiedAt: DateTime!
}

type Guest {
  houseNumber: String!
  numberOfAdultGuests: Int!
  numberOfChildGuests: Int!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

input MenuPlanFilterInput {
  and: [MenuPlanFilterInput!]
  or: [MenuPlanFilterInput!]
  recipeIds: ListUuidOperationFilterInput
  recipes: ListFilterInputTypeOfRecipeFilterInput
  date: DateTimeOperationFilterInput
  participantIds: ListUuidOperationFilterInput
  participants: ListFilterInputTypeOfResidentFilterInput
  chefIds: ListUuidOperationFilterInput
  thumbnail: StringOperationFilterInput
  chefs: ListFilterInputTypeOfResidentFilterInput
  guests: ListFilterInputTypeOfGuestFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
}

input MenuPlanSortInput {
  date: SortEnumType
  thumbnail: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  modifiedAt: SortEnumType
}

"""
A connection to a list of items.
"""
type MenuPlanConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MenuPlanEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [MenuPlan!]
}

input RecipeFilterInput {
  and: [RecipeFilterInput!]
  or: [RecipeFilterInput!]
  name: StringOperationFilterInput
  category: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
}

input RecipeSortInput {
  name: SortEnumType
  category: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  modifiedAt: SortEnumType
}

"""
A connection to a list of items.
"""
type RecipesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RecipesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Recipe!]
}

input ResidentFilterInput {
  and: [ResidentFilterInput!]
  or: [ResidentFilterInput!]
  username: StringOperationFilterInput
  passwordHash: StringOperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  birthDate: DateTimeOperationFilterInput
  child: BooleanOperationFilterInput
  houseNumber: StringOperationFilterInput
  roles: ListStringOperationFilterInput
  participatesInIds: ListUuidOperationFilterInput
  participatesIn: ListFilterInputTypeOfMenuPlanFilterInput
  cooksInIds: ListUuidOperationFilterInput
  cooksIn: ListFilterInputTypeOfMenuPlanFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
}

input ResidentSortInput {
  username: SortEnumType
  passwordHash: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  birthDate: SortEnumType
  child: SortEnumType
  houseNumber: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  modifiedAt: SortEnumType
}

"""
A connection to a list of items.
"""
type ResidentsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ResidentsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Resident!]
}

type NotFoundError {
  message: String!
  ids: [UUID!]!
}

type MenuPlanAlreadyExistsError {
  message: String!
  date: DateTime!
}

type EventIsInThePastError {
  message: String!
}

type UsernameAlreadyTakenError {
  message: String!
}

type AuthenticationError {
  message: String!
}

input ListUuidOperationFilterInput {
  all: UuidOperationFilterInput
  none: UuidOperationFilterInput
  some: UuidOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRecipeFilterInput {
  all: RecipeFilterInput
  none: RecipeFilterInput
  some: RecipeFilterInput
  any: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfResidentFilterInput {
  all: ResidentFilterInput
  none: ResidentFilterInput
  some: ResidentFilterInput
  any: Boolean
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListFilterInputTypeOfGuestFilterInput {
  all: GuestFilterInput
  none: GuestFilterInput
  some: GuestFilterInput
  any: Boolean
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type MenuPlanEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MenuPlan!
}

"""
An edge in a connection.
"""
type RecipesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Recipe!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMenuPlanFilterInput {
  all: MenuPlanFilterInput
  none: MenuPlanFilterInput
  some: MenuPlanFilterInput
  any: Boolean
}

"""
An edge in a connection.
"""
type ResidentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Resident!
}

input GuestFilterInput {
  and: [GuestFilterInput!]
  or: [GuestFilterInput!]
  houseNumber: StringOperationFilterInput
  numberOfAdultGuests: IntOperationFilterInput
  numberOfChildGuests: IntOperationFilterInput
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

type MenuPlanUpdatedEventMessage {
  updatedMenuPlan: MenuPlan!
}

input ChangePasswordInput {
  username: String!
  oldPassword: String!
  newPassword: String!
}

input ForgotPasswordInput {
  username: String!
}

input AuthenticateInput {
  username: String!
  password: String!
}

type AuthenticateResult {
  token: String!
}

input CreateResidentInput {
  username: String!
  firstName: String
  lastName: String
  houseNumber: String!
  sendWelcomeEmail: Boolean!
}

type SuccessResult {
  success: Boolean!
}

input MenuPlanAttendanceInput {
  menuPlanId: UUID!
  residentId: UUID
}

input CreateWeekPlanInput {
  fromDate: DateTime!
  monday: CreateDayPlanInput!
  tuesday: CreateDayPlanInput!
  wednesday: CreateDayPlanInput!
  thursday: CreateDayPlanInput!
  friday: CreateDayPlanInput!
}

input CreateMenuPlanInput {
  thumbnail: String
  recipes: [UUID!]!
  date: DateTime!
}

input CreateRecipeInput {
  name: String!
  category: String!
  thumbnail: String
}

input CreateDayPlanInput {
  thumbnail: String
  recipes: [CreateRecipeInput!]!
}
